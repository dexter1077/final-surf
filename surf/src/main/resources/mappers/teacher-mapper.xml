<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- author 윤희락 -->
<mapper namespace="teacherMapper">
	<resultMap id="teacherResult" type="Teacher">
		<result column="teacher_no" property="teacherNo"/>
		<result column="profile_image" property="profileImage"/>
		<result column="nickname" property="nickname"/>
		<result column="phone" property="phone"/>
		<result column="intro_content" property="introContent"/>
		<result column="subcat_no" property="subCatNo"/>
		<result column="status" property="status"/>
		<result column="class_title" property="classTitle"/>
	</resultMap>
	
	<resultMap id="lectureResult" type="Lecture">
		<result column="class_no" property="classNo"/>
		<result column="class_title" property="classTitle"/>
	</resultMap>
	
	<resultMap id="surveyResult" type="Survey">
		<result column="survey_no" property="surveyNo"/>
		<result column="nickname" property="userNo"/>
		<result column="score" property="score"/>
		<result column="review" property="review"/>
		<result column="create_date" property="createDate"/>
		<result column="class_title" property="classTitle"/>
	</resultMap>
	
	<resultMap id="monthlyStatsResult" type="MonthlyStats">
		<id column="month" property="month"/>
		<id column="loan" property="loan"/>
	</resultMap>
	
	<resultMap id="inquiryResult" type="ClassInquiry">
		<id column="inquiry_no" property="inquiryNo"/>
		<id column="inq_content" property="inqContent"/>
		<id column="inq_date" property="inqDate"/>
		<id column="ans_content" property="ansContent"/>
		<id column="ans_date" property="ansDate"/>
		<id column="nickname" property="userNo"/>
		<id column="class_title" property="classTitle"/>
		<id column="t_nickname" property="teacherNo"/>
		<id column="profile_image" property="teacherImage"/>
	</resultMap>
	
	<resultMap id="statsDataResult" type="StatsData">
		<id column="payment_date" property="dataUnit"/>
		<id column="days" property="dataUnit"/>
		<id column="gender" property="dataUnit"/>
		<id column="age_range" property="dataUnit"/>
		<id column="count" property="count"/>
		<id column="data" property="dataUnit"/>
		<id column="5점" property="score5"/>
		<id column="4점" property="score4"/>
		<id column="3점" property="score3"/>
		<id column="2점" property="score2"/>
		<id column="1점" property="score1"/>
	</resultMap>
	
	<!--
		강사정보수정페이지 view 에 '강사정보노출'
		@author HeeRak
	-->
	<select id="selectTeacher" resultMap="teacherResult">
		select 
			   teacher_no
			 , profile_image
			 , nickname
			 , phone
			 , intro_content
			 , subcat_no
			 , status
		  from teacher
		 where teacher_no = #{userNo}
		   and status = 'Y'
	</select>
	
	<!--
		강사정보수정페이지 '닉네임 중복확인결과'
		@author HeeRak
	-->
	<select id="checkNickname" resultType="_int" parameterType="Teacher">
		select count(*)
		  from teacher
		 where nickname = #{nickname}
		   and teacher_no != #{teacherNo}
	</select>
	
	<!--
		강사정보수정페이지에서 입력된 강사정보로 '강사정보수정'
		@author HeeRak
	-->
	<update id="updateTeacher">
		update teacher
		   set nickname = #{nickname}
		     , phone = #{phone}
		     , intro_content = #{introContent}
		     <if test="profileImage != null">
		     , profile_image = #{profileImage}
		     </if>
		 where teacher_no = #{teacherNo}
		   and status = 'Y'
	</update>
	
	<!-- 
		해당 강사의 조회 가능한 클래스 목록 조회
		@author WooJoo
	-->
	<select id="selectClassList" resultMap="lectureResult">
		select
			   class_no
			 , class_title
	      from lecture
	     where status = 'O'
	       and user_no = #{userNo}
	     order 
	        by class_no
	</select>
	
	<!-- 
		수강 후기 조회 '조회할 대상 개수 조회'
		@author WooJoo
	-->
	<select id="selectReviewCount" resultType="_int">
		select
			   count(*)
		  from survey
		  <choose>
		  	<when test="cno == 'all'">
		 		where teacher_no = #{userNo}
		  	</when>
		  	<otherwise>
		  		where class_no = #{cno}
		  	</otherwise>
		  </choose>
	</select>
	
	<!-- 
		수강 후기 조회 '조건에 따라 목록 조회'
		@author WooJoo
	-->
	<select id="selectReviewList" resultMap="surveyResult">
		select
			   survey_no
			 , nickname
			 , score
			 , replace(review, '&lt;br&gt;', ' ') review
			 , to_char(create_date, 'YYYY-MM-DD') as create_date
		  from survey
		  join member using(user_no)
		 <choose>
		  	<when test="cno == 'all'">
		 		where teacher_no = #{userNo}
		  	</when>
		  	<otherwise>
		  		where class_no = #{cno}
		  	</otherwise>
		  </choose>
		 order
		    by survey_no desc
	</select>
	
	<!-- 
		수강 후기 조회 '후기 상세 내용 조회'
		@author WooJoo
	-->
	<select id="selectReviewDetail" resultMap="surveyResult">
		select
			   class_title
             , survey_no
			 , nickname
			 , score
			 , review
			 , to_char(s.create_date, 'YYYY-MM-DD') as create_date
		  from survey s
          join lecture l on s.class_no = l.class_no
          join member m on s.user_no = m.user_no
		 where survey_no = #{sno}
	</select>
	
	<!--
		월별집계 '전체클래스 수익조회' 
		@author HeeRak
	-->
	<select id="monthlyStatsAll" resultType="MonthlyStats">
		with dummy AS (
					    <![CDATA[select extract(month from add_months(to_date('01/01/2021', 'MM/DD/YYYY'), level - 1)) month
					      from dual
					   connect by level <= 12]]>
		    )
		   , STATS AS (
		   select extract(month from payment_date) as month
		        , sum(price) loan 
		     from payment
		    where class_no in(
		                        select class_no
		                          from lecture
		                         where user_no = #{userNo}
		                        )
		    and refund_status = 'N'
		    and extract(year from payment_date) = 2021
		  group
		     by extract(month from payment_date)
		  order
		     by extract(month from payment_date)
		   )
		   SELECT month, NVL(LOAN, 0) LOAN
		     FROM DUMMY 
		     LEFT OUTER JOIN STATS USING(MONTH)
		     ORDER BY MONTH
	</select>
	
	<!--
		월별집계 '한클래스 수익조회' 
		@author HeeRak
	-->
	<select id="monthlyStatsLecture" resultType="MonthlyStats" parameterType="Lecture">
		with dummy AS (
					    <![CDATA[select extract(month from add_months(to_date('01/01/2021', 'MM/DD/YYYY'), level - 1)) month
					      from dual
					   connect by level <= 12]]>
		    )
		   , STATS AS (
		   select extract(month from payment_date) as month
		        , sum(price) loan 
		     from payment
		    where class_no in(
		                        select class_no
		                          from lecture
		                         where class_no = #{classNo}
		                        )
		    and refund_status = 'N'
		    and extract(year from payment_date) = 2021
		  group
		     by extract(month from payment_date)
		  order
		     by extract(month from payment_date)
		   )
		   SELECT month, NVL(LOAN, 0) LOAN
		     FROM DUMMY 
		     LEFT OUTER JOIN STATS USING(MONTH)
		     ORDER BY MONTH
	</select>
	
	<!--
		클래스 펀딩승인 'status Q->F'
		@author HeeRak
	-->
	<update id="startFunding" parameterType="Lecture">
		update lecture
		   set status = 'F'
		 where status = 'Q'
		   and class_no = #{classNo}
		   and user_no = #{userNo} 
	</update>
	
	<!--
		클래스 펀딩승인 'status Q->F'
		@author HeeRak
	-->
	<insert id="insertFunding" parameterType="Lecture">
		insert
		  into class_funding
		 	 (
		 	   class_no
		 	 )
		 values
		 	 (
		 	   #{classNo}
		 	 )
	</insert>
	
	<!--
		클래스 삭제요청 'status ''->D'
		@author HeeRak
	-->
	<update id="deleteLecture" parameterType="Lecture">
		update lecture
		   set status = 'D'
		 where class_no = #{classNo}
		   and user_no = #{userNo} 
	</update>
	
	<!-- 
		문의 조회 및 답변 '조회할 대상 개수 조회'
		@author WooJoo
	-->
	<select id="selectInquiryCount" resultType="_int">
		select
			   count(*)
		  from class_inquiry
		  <choose>
		  	<when test="cno == 'all'">
		 		where teacher_no = #{userNo}
		  	</when>
		  	<otherwise>
		  		where class_no = #{cno}
		  	</otherwise>
		  </choose>
		  <if test="condition != 'all'">
		  	and ans_content is null
		  </if>
	</select>
	
	<!-- 
		문의 조회 및 답변 '조건에 맞는 문의글 목록 조회'
		@author WooJoo
	-->
	<select id="selectInquiryList" resultMap="inquiryResult">
		select
			   inquiry_no
             , replace(inq_content, '&lt;br&gt;', ' ') inq_content
             , to_char(inq_date, 'YYYY-MM-DD') as inq_date
             , ans_content
             , to_char(ans_date, 'YYYY-MM-DD') as ans_date
             , nickname
		  from class_inquiry
		  join member using(user_no)
		 <choose>
		  	<when test="cno == 'all'">
		 		where teacher_no = #{userNo}
		  	</when>
		  	<otherwise>
		  		where class_no = #{cno}
		  	</otherwise>
		  </choose>
		  <if test="condition != 'all'">
		  	and ans_content is null
		  </if>
		 order
		    by inquiry_no desc
	</select>
	
	<!-- 
		클래스 번호로 '강사 정보 조회'
		@author HeeRak
	-->
	<select id="selectTeacherByClassNo" resultMap="teacherResult" parameterType="_int">
		select 
		       teacher_no
		     , profile_image
		     , nickname
		     , class_title
		  from teacher
		  join lecture on(teacher_no = user_no)
		 where class_no = #{class_no}
	</select>
	
	<!-- 
		문의 조회 및 답변 '문의글 상세 내용 조회'
		@author WooJoo
	-->
	<select id="selectInquiryDetail" resultMap="inquiryResult">
		select
			   inquiry_no
             , class_title
             , m.nickname
             , inq_content
             , to_char(inq_date, 'YYYY-MM-DD') as inq_date
             , ans_content
             , to_char(ans_date, 'YYYY-MM-DD') as ans_date
             , t.nickname as t_nickname
             , profile_image
		  from class_inquiry i
		  join lecture l on i.class_no = l.class_no
          join member m on i.user_no = m.user_no
          join teacher t on i.teacher_no = t.teacher_no
         where inquiry_no = #{ino}
	</select>
	
	<!-- 
		문의 조회 및 답변 '문의글 답변 작성'
		@author WooJoo
	-->
	<update id="updateNewAnswer">
		update class_inquiry
		set ans_content = #{ansContent}
		  , ans_date = sysdate
		where inquiry_no = #{inquiryNo}
	</update>
	
	<!-- 
		문의 조회 및 답변 '문의글 답변 수정'
		@author WooJoo
	-->
	<update id="updateOldAnswer">
		update class_inquiry
		set ans_content = #{ansContent}
		where inquiry_no = #{inquiryNo}
	</update>
	
	<!-- 
		문의 조회 및 답변 '문의글 답변 삭제'
		@author WooJoo
	-->
	<update id="deleteAnswer">
		update class_inquiry
		set ans_content = null
		  , ans_date = null
		where inquiry_no = #{inquiryNo}
	</update>

	<!-- 
		수강 통계 '신규 수강 건수 조회'
		@author WooJoo
	-->
	<select id="selectNewOrderStats" resultMap="statsDataResult">
		select 
			   <choose>
			   	<when test="condition == 'daily'">
                	to_char(b.dt, 'MM/DD') as payment_date			   	
			   	</when>
			   	<otherwise>
                	to_char(b.dt, 'FMMM')||'월' as payment_date               	
			   	</otherwise>
			   </choose>
			 , nvl(sum(a.count), 0) as count
		  from (select 
			   		   payment_date
                     , count(*) as count
                  from (select 
							   p.class_no
						     , to_char(payment_date,'YYYY-MM-DD') as payment_date
						     , p.status
						     , p.refund_status
						     , nvl((select l.user_no 
						     		  from lecture l 
						     	     where p.class_no = l.class_no), '0') as teacher_no
						  from payment p)
                 where status = 'Y'
		   		   and refund_status = 'N'
				 <choose>
					<when test="cno == 'all'">
						and teacher_no = #{userNo}
					</when>
					<otherwise>
			           	and class_no = #{cno}
					</otherwise>
				  </choose>
                group by payment_date) a, 
                (select to_date('2020-01-01','YYYY-MM-DD') + LEVEL - 1 as dt
            	   from dual
         		<![CDATA[connect by LEVEL <= (sysdate - to_date('2020-01-01','YYYY-MM-DD') + 1)) b]]>
         	 where b.dt = a.payment_date(+)
         <choose>
			<when test="condition == 'daily'">
	           and b.dt > sysdate - 7
	         group by b.dt
	         order by b.dt
			</when>
			<otherwise>
	           and b.dt > trunc(add_months(sysdate, -5), 'FMMM')
	         group by to_char(b.dt, 'FMMM')
	         order by to_char(b.dt, 'FMMM')
			</otherwise>
		  </choose>
	</select>
	
	<!-- 
		수강 통계 '완강 소요 일수 조회'
		@author WooJoo
	-->
	<select id="selectStudyDaysStats" resultMap="statsDataResult">
		select
		       days
		     , count(*) as count
		  from (select l.user_no
		     , s.class_no
		     , TO_DATE(s.end_date,'YYYY-MM-DD') - TO_DATE(s.start_date, 'YYYY-MM-DD') + 1 as days
		  from class_studing s
		  join lecture l on(s.class_no = l.class_no)
		 where end_date is not null)
		 <choose>
		  	<when test="cno == 'all'">
			 	where user_no = #{userNo}
			 </when>
			 <otherwise>
			 	where class_no = #{cno}
			 </otherwise>
		 </choose>
		 group by days
		 order by days
	</select>
	
	<!-- 
		수강 통계 '수강생 성별 비율 조회'
		@author WooJoo
	-->
	<select id="selectGenderRateStats" resultMap="statsDataResult">
		select case gender when 'M' then '남'
		                   when 'F' then '여'
		                   else '기타' end as gender
		     , count(*) as count
		  from(select p.class_no
		     , l.user_no
		     , m.gender
		  from payment p
		  join lecture l on(p.class_no = l.class_no)
		  join member m on(p.user_no = m.user_no)
		 where p.status = 'Y'
		   and p.refund_status = 'N'
		    <choose>
				<when test="cno == 'all'">
					and l.user_no = #{userNo})
				</when>
				<otherwise>
					and p.class_no = #{cno})
				</otherwise>
			</choose>
		   group by gender
	</select>
	
	<!-- 
		수강 통계 '수강생 연령대별 비율 조회'
		@author WooJoo
	-->
	<select id="selectAgeGroupRateStats" resultMap="statsDataResult">
		select age_range||'대' as age_range
		     , count(*) count
		  from (select p.class_no
		             , l.user_no as teacher_no
		             , m.age_range
		          from payment p
		          join lecture l on(p.class_no = l.class_no)
		          join member m on(p.user_no = m.user_no)
		         where p.status = 'Y'
		           and p.refund_status = 'N'
		           <choose>
						<when test="cno == 'all'">
							and l.user_no = #{userNo})
						</when>
						<otherwise>
							and p.class_no = #{cno})
						</otherwise>
					</choose>
		 group by age_range
		 order by age_range
	</select>
	
	<!-- 
		설문 조사 통계 '설문 조사 데이터 조회'
		@author WooJoo
	-->
	<select id="selectSurveyStats" resultMap="statsDataResult">
		select *
		  from (
				select data
					 , a 
				  from (
						select 
						       quality as 퀄리티
						     , satisfaction as 만족도
						     , difficulty as 난이도
						     , price as 가격
						     , score as 평점
						  from survey
						 <choose>
							<when test="cno == 'all'">
						 		where teacher_no = #{userNo})
						 	</when>
						 	<otherwise>
						 		where class_no = #{cno})
						 	</otherwise>
						 </choose>
				unpivot (a 
						 for data 
						 in (
				                              퀄리티
				             , 만족도
				             , 난이도
				             , 가격
				             , 평점)))
		pivot (count(a) 
			   for a 
			   in (
			   		'5' as "5점"
			   	  , '4' as "4점"
			   	  , '3' as "3점"
			   	  , '2' as "2점"
			   	  , '1' as "1점"))
		order by data
	</select>
	
	<!-- 
		설문 조사 통계  '설문 조사 응답수 조회'
		@author WooJoo
	-->
	<select id="selectRespondentCount" resultType="_int">
		select count(*) as count
		  from survey s
		  <choose>
			<when test="cno == 'all'">
		 		where teacher_no = #{userNo}
		 	</when>
		    <otherwise>
		 		where class_no = #{cno}
		 	</otherwise>
		 </choose>
	</select>
	
	<!-- 
		@author leeyeji
		강사 신청
	 -->
	<insert id="applyTeacher" parameterType="Teacher">
		insert
		  into teacher
		  (
		  	teacher_no
		  , profile_image
		  , nickname
		  , phone
		  , intro_content
		  , subcat_no
		  )
		  values
		  (
		  	#{teacherNo}
		  , #{profileImage}
          , #{nickname}
          , #{phone}
          , #{introContent}
          , #{subNo}
		  )
	</insert>
	
</mapper>
